               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 007a                         dw          #adcSample/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 007f                         dw          #adcSample/execute
               pFwTaskTerminateFuncTable:
006a ---- 00d2                         dw          #adcSample/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: ADC Sample"
               adcSample/cfg:
               adcSample/cfg/changeMask:
0075 ---- 0000                         dw          #0
               adcSample/cfg/minReportInterval:
0076 ---- 0000                         dw          #0
               adcSample/input:
               adcSample/output:
               adcSample/output/adcValue:
0077 ---- 0000                         dw          #0
               adcSample/state:
               adcSample/state/oldAdcMaskedBits:
0078 ---- 0000                         dw          #0
               adcSample/state/samplesSinceLastReport:
0079 ---- 0000                         dw          #0
               .segment end "Task: ADC Sample"
               
               
               .segment begin "Task: ADC Sample"
               adcSample/initialize:
               ;? // Select ADC input (A2 / DIO25)
               ;? adcSelectGpioInput(2);
007a ---- 7002                         ld          R7, #2
007b ---- 14d3                         jsr         AdccompbSelectGpioInput
               ;? 
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
007c ---- 0001                         ld          R0, #1
007d ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/initializeDone:
007e ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adcSample/execute:
               ;? // Enable the ADC
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);
007f ---- f502                         loop        #128, /id0111
0080 ---- fd47                         nop         
0081 ---- fd47                         nop         
0082 ---- fd47                         nop         
               /id0111:
0083 ---- 7041                         ld          R7, #((0 | (((3 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0084 ---- 1462                         jsr         AdiDdiAcquire
0085 ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
0086 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0088 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0112:
0089 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
008a ---- a6fe                         biob0       /id0112
008b ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
008c ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
008d ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
008e ---- 7018                         ld          R7, #(3 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
008f ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0090 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0091 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0092 ---- fd47                         nop         
0093 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0094 ---- 1465                         jsr         AdiDdiRelease
               ;? 
               ;? // Sample Motion
               ;? // If the signal is high
               ;? gpioEnableInputBuf(AUXIO_I_D_INPUT);
0095 ---- 7529                         iobset      #(5 & 0x7), [#(IOP_AIODIO0_GPIODIE + (5 >> 3))]
               ;? gpioCfgMode(AUXIO_I_D_INPUT, GPIO_MODE_INPUT);
0096 ---- 8910                         in          R0, [#(IOP_AIODIO0_IOMODE + (5 >> 3))]
0097 86f3 80ff                         and         R0, #((~(0x0003 << (2 * (5 & 0x7)))) & 0xFFFF)
0099 8604 8200                         or          R0, #(1 << (2 * (5 & 0x7)))
009b ---- 8b10                         out         R0, [#(IOP_AIODIO0_IOMODE + (5 >> 3))]
               ;? 
               ;? // Sample the ADC
               ;? S16 adcValue;
               ;? S16 digitalValue = 0;
009c ---- 1000                         ld          R1, #0
               ;? U16 signal;
               ;? adcGenManualTrigger();
009d ---- 6403                         iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;? adcReadFifo(adcValue);
009e ---- 001f                         ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
009f ---- 8b2c                         out         R0, [#IOP_EVCTL_SCEWEVSEL]
00a0 ---- fdb1                         wev1        #WEVSEL_PROG
00a1 ---- 8902                         in          R0, [#IOP_ANAIF_ADCFIFO]
               ;? 
               ;? // Disable the ADC
               ;? adcDisable();
00a2 ---- 14e0                         jsr         AdcDisable
               ;? //---------------------------------------------------------// Sample Motion
               ;? 
               ;? 
               ;? //n = 5;
               ;? 
               ;? 
               ;? 
               ;? //gpioGetInputValue(AUXIO_A_MOTION_INPUT; signal);
               ;? 
               ;? gpioGetInputValue(AUXIO_I_D_INPUT; signal);
00a3 ---- 5005                         ld          R5, #5
00a4 ---- 14eb                         jsr         gpioGetInputValue
               ;? if (signal == 1) {
00a5 ---- fa01                         cmp         R7, #1
00a6 ---- be05                         bneq        /id0124
               ;?     //Clear Unused bits
               ;?     //              0x0000 0111 1111 1111
               ;?     //              0x   0    7    F    F
               ;?     digitalValue &= 0x07FF;
00a7 8607 90ff                             and         R1, #2047
               ;?     
               ;?     //Input Motion Value
               ;?     //              0b0000 1000 0000 0000
               ;?     //              0x   0    8    0    0
               ;?     digitalValue |= 0x0800;
00a9 8608 9200                             or          R1, #2048
               ;?     
               ;?     
               ;? } else {
00ab ---- 04ae                         jmp         /id0126
               /id0124:
               ;?     //Clear Motion Value
               ;?     //              0b0000 0111 1111 1111
               ;?     //              0x   0    7    F    F
               ;?     digitalValue &= 0x07FF;
00ac 8607 90ff                             and         R1, #2047
               ;?     
               ;? }
               /id0126:
               ;? output.adcValue = adcValue + digitalValue;
00ae ---- dd40                         ld          R5, R0
00af ---- dd21                         add         R5, R1
00b0 ---- 5c77                         st          R5, [#adcSample/output/adcValue]
               ;? 
               ;? 
               ;? 
               ;? 
               ;? 
               ;? // Alert the driver if outside of change mask
               ;? U16 adcMaskedBits = adcValue & cfg.changeMask;
00b1 ---- 9d40                         ld          R1, R0
00b2 ---- 5875                         ld          R5, [#adcSample/cfg/changeMask]
00b3 ---- 9d05                         and         R1, R5
               ;? if (adcMaskedBits != state.oldAdcMaskedBits) {
00b4 ---- 5878                         ld          R5, [#adcSample/state/oldAdcMaskedBits]
00b5 ---- 9d2d                         cmp         R1, R5
00b6 ---- b606                         beq         /id0134
               ;?     fwGenAlertInterrupt();
00b7 ---- 186c                             ld          R1, [#fwCtrlInt/bvTaskIoAlert]
00b8 ---- 9201                             or          R1, #(1 << 0)
00b9 ---- 1c6c                             st          R1, [#fwCtrlInt/bvTaskIoAlert]
               ;?     state.samplesSinceLastReport = 0;
00ba ---- 1000                             ld          R1, #0
00bb ---- 1c79                             st          R1, [#adcSample/state/samplesSinceLastReport]
               ;? } else {
00bc ---- 04c0                         jmp         /id0137
               /id0134:
               ;?     state.samplesSinceLastReport = state.samplesSinceLastReport + 1;
00bd ---- 1879                             ld          R1, [#adcSample/state/samplesSinceLastReport]
00be ---- 9801                             add         R1, #1
00bf ---- 1c79                             st          R1, [#adcSample/state/samplesSinceLastReport]
               ;? }
               /id0137:
               ;? 
               ;? //Alert driver if minimum report interval has expired
               ;? if(cfg.minReportInterval != 0) {
00c0 ---- 1876                         ld          R1, [#adcSample/cfg/minReportInterval]
00c1 ---- 9a00                         cmp         R1, #0
00c2 ---- b609                         beq         /id0141
               ;?     if(state.samplesSinceLastReport >= cfg.minReportInterval) {
00c3 ---- 1879                             ld          R1, [#adcSample/state/samplesSinceLastReport]
00c4 ---- 5876                             ld          R5, [#adcSample/cfg/minReportInterval]
00c5 ---- 9d2d                             cmp         R1, R5
00c6 ---- ae05                             bltu        /id0143
               ;?         fwGenAlertInterrupt();
00c7 ---- 186c                                 ld          R1, [#fwCtrlInt/bvTaskIoAlert]
00c8 ---- 9201                                 or          R1, #(1 << 0)
00c9 ---- 1c6c                                 st          R1, [#fwCtrlInt/bvTaskIoAlert]
               ;?         state.samplesSinceLastReport = 0;
00ca ---- 1000                                 ld          R1, #0
00cb ---- 1c79                                 st          R1, [#adcSample/state/samplesSinceLastReport]
               ;?     }
               /id0143:
               ;? }
               /id0141:
               ;? 
               ;? // Save old masked ADC value
               ;? state.oldAdcMaskedBits = adcValue & cfg.changeMask;
00cc ---- 1875                         ld          R1, [#adcSample/cfg/changeMask]
00cd ---- 8d01                         and         R0, R1
00ce ---- 0c78                         st          R0, [#adcSample/state/oldAdcMaskedBits]
               ;? 
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00cf ---- 0001                         ld          R0, #1
00d0 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/executeDone:
00d1 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adcSample/terminate:
               adcSample/terminateDone:
00d2 ---- adb7                         rts         
               .segment end "Task: ADC Sample"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00d3 ---- f007                         and         R7, #0x0007
               
                                       ; Disconnect all signals
00d4 ---- 1462                         jsr         AdiDdiAcquire
00d5 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00d7 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]
               
                                       ; Connect the specified GPIO
00d8 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00da ---- ed8f                         lsr         R6, R7
00db ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
               
                                       ; Ensure that it has taken effect
00dc ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00dd ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
00de ---- 1465                         jsr         AdiDdiRelease
00df ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
00e0 ---- 1462                         jsr         AdiDdiAcquire
00e1 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
00e2 ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]
               
                                       ; Assert reset and disable the ADC
00e3 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
00e4 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
               
                                       ; Ensure that it has taken effect
00e5 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00e6 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00e7 ---- 1465                         jsr         AdiDdiRelease
               
                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
00e8 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               
                                       ; Disable the ADC data interface
00e9 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]
               
00ea ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R5 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R6, R7
               gpioGetInputValue:
                                       ; Get GPIOs 15:8
00eb ---- e913                         in          R6, [#IOP_AIODIO1_GPIODIN]
00ec ---- eda0                         lsl         R6, #8
               
                                       ; Get GPIOs 7:0 and combine
00ed ---- f912                         in          R7, [#IOP_AIODIO0_GPIODIN]
00ee ---- fd0e                         or          R7, R6
               
                                       ; Move the desired GPIO pin value into bit 0 and mask
00ef ---- fd8d                         lsr         R7, R5
00f0 ---- f001                         and         R7, #0x0001
00f1 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by ZAINZENBOOK at 2018-03-05 15:24:38.315
