               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               ; (None)
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               
               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 007e                         dw          #adcSample/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0081                         dw          #adcSample/execute
               pFwTaskTerminateFuncTable:
006a ---- 00b3                         dw          #adcSample/terminate
               
               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)
               
               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: ADC Sample"
               adcSample/cfg:
               adcSample/cfg/changeMask:
0075 ---- 0000                         dw          #0
               adcSample/cfg/minReportInterval:
0076 ---- 0000                         dw          #0
               adcSample/cfg/pAuxioIDInput:
0077 ---- 0005                         dw          #5
0078 ---- 0004                         dw          #4
0079 ---- 0003                         dw          #3
               adcSample/input:
               adcSample/output:
               adcSample/output/adcValue:
007a ---- 0000                         dw          #0
               adcSample/output/digitalValue:
007b ---- 0000                         dw          #0
               adcSample/state:
               adcSample/state/oldAdcMaskedBits:
007c ---- 0000                         dw          #0
               adcSample/state/samplesSinceLastReport:
007d ---- 0000                         dw          #0
               .segment end "Task: ADC Sample"
               
               
               .segment begin "Task: ADC Sample"
               adcSample/initialize:
               ;? // Select ADC input (A / DIO23)
               ;? //adcSelectGpioInput(AUXIO_A_AD_INPUT);
               ;? 
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
007e ---- 0001                         ld          R0, #1
007f ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/initializeDone:
0080 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adcSample/execute:
               ;? // Sample Motion
               ;? // If the signal is high
               ;? gpioEnableInputBuf(cfg.pAuxioIDInput[0]);
0081 ---- 7877                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 0)]
0082 ---- 14b4                         jsr         gpioEnableInputBuf
               ;? gpioEnableInputBuf(cfg.pAuxioIDInput[1]);
0083 ---- 7878                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 1)]
0084 ---- 14b4                         jsr         gpioEnableInputBuf
               ;? gpioEnableInputBuf(cfg.pAuxioIDInput[2]);
0085 ---- 7879                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 2)]
0086 ---- 14b4                         jsr         gpioEnableInputBuf
               ;? 
               ;? gpioCfgMode(cfg.pAuxioIDInput[0], GPIO_MODE_INPUT);
0087 ---- 7877                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 0)]
0088 ---- 6001                         ld          R6, #1
0089 ---- 14be                         jsr         gpioCfgMode
               ;? gpioCfgMode(cfg.pAuxioIDInput[1], GPIO_MODE_INPUT);
008a ---- 7878                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 1)]
008b ---- 6001                         ld          R6, #1
008c ---- 14be                         jsr         gpioCfgMode
               ;? gpioCfgMode(cfg.pAuxioIDInput[2], GPIO_MODE_INPUT);
008d ---- 7879                         ld          R7, [#(adcSample/cfg/pAuxioIDInput + 2)]
008e ---- 6001                         ld          R6, #1
008f ---- 14be                         jsr         gpioCfgMode
               ;? 
               ;? // Sample the ADC
               ;? S16 adcValue;
               ;? S16 digitalValue0 = 0;
               ;? S16 digitalValue1 = 0;
               ;? S16 digitalValue2 = 0;
               ;? S16 digitalOutput0 = 0;
               ;? S16 digitalOutput1 = 0;
               ;? S16 digitalOutput2 = 0;
               ;? 
               ;? S16 digitalValueTotal = 0;
0090 ---- 2000                         ld          R2, #0
               ;? 
               ;? U16 signal;
               ;? 
               ;? //---------------------------------------------------------// Sample Motion
               ;? 
               ;? 
               ;? //n = 5;
               ;? 
               ;? 
               ;? 
               ;? //gpioGetInputValue(AUXIO_A_MOTION_INPUT; signal);
               ;? 
               ;? gpioGetInputValue(cfg.pAuxioIDInput[0]; signal);
0091 ---- 5877                         ld          R5, [#(adcSample/cfg/pAuxioIDInput + 0)]
0092 ---- 14cd                         jsr         gpioGetInputValue
               ;? if (signal == 1) {
0093 ---- fa01                         cmp         R7, #1
0094 ---- be03                         bneq        /id0163
               ;?     //Clear Bits
               ;?     digitalValue0 &= 0x0000;
0095 ---- 0000                             ld          R0, #0
               ;?     
               ;?     //Input Value
               ;?     digitalValue0 |= 0x0001;
0096 ---- 8201                             or          R0, #1
               ;?     
               ;? } else {
0097 ---- 0499                         jmp         /id0165
               /id0163:
               ;?     //Clear Motion Value
               ;?     digitalValue0 &= 0x0000;
0098 ---- 0000                             ld          R0, #0
               ;? }
               /id0165:
               ;? 
               ;? gpioGetInputValue(cfg.pAuxioIDInput[1]; signal);
0099 ---- 5878                         ld          R5, [#(adcSample/cfg/pAuxioIDInput + 1)]
009a ---- 14cd                         jsr         gpioGetInputValue
               ;? if (signal == 1) {
009b ---- fa01                         cmp         R7, #1
009c ---- be03                         bneq        /id0173
               ;?     //Clear Bits
               ;?     digitalValue1 &= 0x0000;
009d ---- 1000                             ld          R1, #0
               ;?     
               ;?     //Input Value
               ;?     digitalValue1 |= 0x0002;
009e ---- 9202                             or          R1, #2
               ;?     
               ;? } else {
009f ---- 04a1                         jmp         /id0175
               /id0173:
               ;?     //Clear Motion Value
               ;?     digitalValue1 &= 0x0000;
00a0 ---- 1000                             ld          R1, #0
               ;? }
               /id0175:
               ;? gpioGetInputValue(cfg.pAuxioIDInput[2]; signal);
00a1 ---- 5879                         ld          R5, [#(adcSample/cfg/pAuxioIDInput + 2)]
00a2 ---- 14cd                         jsr         gpioGetInputValue
               ;? if (signal == 1) {
00a3 ---- fa01                         cmp         R7, #1
00a4 ---- be03                         bneq        /id0183
               ;?     //Clear Bits
               ;?     digitalValue2 &= 0x0000;
00a5 ---- 5000                             ld          R5, #0
               ;?     
               ;?     //Input Value
               ;?     digitalValue2 |= 0x0004;
00a6 ---- d204                             or          R5, #4
               ;?     
               ;? } else {
00a7 ---- 04a9                         jmp         /id0185
               /id0183:
               ;?     //Clear Motion Value
               ;?     digitalValue2 &= 0x0000;
00a8 ---- 5000                             ld          R5, #0
               ;? }
               /id0185:
               ;? 
               ;? digitalValueTotal += digitalValue0;
00a9 ---- ad20                         add         R2, R0
               ;? digitalValueTotal += digitalValue1;
00aa ---- ad21                         add         R2, R1
               ;? digitalValueTotal += digitalValue2;
00ab ---- ad25                         add         R2, R5
               ;? 
               ;? output.digitalValue = digitalValueTotal;
00ac ---- 2c7b                         st          R2, [#adcSample/output/digitalValue]
               ;? 
               ;? // Disable the ADC
               ;? 
               ;? 
               ;? fwGenAlertInterrupt();
00ad ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00ae ---- 8201                         or          R0, #(1 << 0)
00af ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? 
               ;? 
               ;? 
               ;? // Schedule the next execution
               ;? fwScheduleTask(1);
00b0 ---- 0001                         ld          R0, #1
00b1 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/executeDone:
00b2 ---- adb7                         rts         
                                       
                                       
                                       
                                       
               adcSample/terminate:
               adcSample/terminateDone:
00b3 ---- adb7                         rts         
               .segment end "Task: ADC Sample"
               
               
               .segment begin "Procedure Libary"
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R5, R6, R7
               gpioEnableInputBuf:     ; Calculate the address of the GPIODIE register
00b4 ---- ed47                         ld          R6, R7
00b5 ---- edab                         lsr         R6, #3
00b6 ---- e829                         add         R6, #IOP_AIODIO0_GPIODIE
               
                                       ; Create the bit-vector to be used for manipulation
00b7 ---- f007                         and         R7, #0x0007
00b8 ---- 5001                         ld          R5, #1
00b9 ---- dd87                         lsl         R5, R7
               
                                       ; Modify the I/O mode register
00ba ---- ff06                         in          R7, [R6]
00bb ---- fd0d                         or          R7, R5
00bc ---- ff26                         out         R7, [R6]
               
                                       ; Done
00bd ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = AUX I/O index
               ;     R6 = AUX I/O mode
               ;
               ; CLOBBERS:
               ;     R4, R5, R6, R7
               gpioCfgMode:            ; Calculate the address of the IOMODE register be modified
00be ---- dd47                         ld          R5, R7
00bf ---- ddab                         lsr         R5, #3
00c0 ---- d810                         add         R5, #IOP_AIODIO0_IOMODE
               
                                       ; Calculate the position of the IOMODE field to be modified
00c1 ---- f007                         and         R7, #0x0007
               
                                       ; Shift up the selected I/O mode to the field position (2 bits per field)
00c2 ---- ed87                         lsl         R6, R7
00c3 ---- ed87                         lsl         R6, R7
               
                                       ; Create a bit-vector to mask out the existing field value (2 bits per field)
00c4 ---- 4003                         ld          R4, #0x0003
00c5 ---- cd87                         lsl         R4, R7
00c6 ---- cd87                         lsl         R4, R7
00c7 ---- cd92                         inv         R4
               
                                       ; Modify the I/O mode register
00c8 ---- ff05                         in          R7, [R5]
00c9 ---- fd04                         and         R7, R4
00ca ---- fd0e                         or          R7, R6
00cb ---- ff25                         out         R7, [R5]
               
                                       ; Done
00cc ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R5 = AUX I/O index
               ;
               ; CLOBBERS:
               ;     R6, R7
               gpioGetInputValue:
                                       ; Get GPIOs 15:8
00cd ---- e913                         in          R6, [#IOP_AIODIO1_GPIODIN]
00ce ---- eda0                         lsl         R6, #8
               
                                       ; Get GPIOs 7:0 and combine
00cf ---- f912                         in          R7, [#IOP_AIODIO0_GPIODIN]
00d0 ---- fd0e                         or          R7, R6
               
                                       ; Move the desired GPIO pin value into bit 0 and mask
00d1 ---- fd8d                         lsr         R7, R5
00d2 ---- f001                         and         R7, #0x0001
00d3 ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by ZAINZENBOOK at 2018-03-31 19:18:12.516
