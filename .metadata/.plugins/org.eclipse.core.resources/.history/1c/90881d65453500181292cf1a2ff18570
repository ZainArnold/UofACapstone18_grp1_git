/*
 * Copyright (c) 2015-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/***** Includes *****/
/* XDCtools Header files */ 
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */ 
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Event.h>
#include <ti/sysbios/knl/Clock.h>

/* TI-RTOS Header files */ 
#include <ti/drivers/PIN.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/power/PowerCC26XX.h>
#include <ti/display/Display.h>
#include <ti/display/DisplayExt.h>

/* Board Header files */
#include "Board.h"

/* Application Header files */ 
#include "SceAdc.h"
#include "NodeTask.h"
#include "NodeRadioTask.h"

//#include <ti/drivers/GPIO.h>
//#include <ti/drivers/I2C.h>

#ifdef FEATURE_BLE_ADV
#include "ble_adv/BleAdv.h"
#endif
#include DeviceFamily_constructPath(driverlib/aon_batmon.h)
#include DeviceFamily_constructPath(driverlib/trng.h)

//-------------------------------------------------------
//  Defines
#define NODE_TASK_STACK_SIZE 1024
#define NODE_TASK_PRIORITY   3

#define NODE_EVENT_ALL                      0xFFFFFFFF
//#define NODE_EVENT_NEW_ADC_VALUE            (uint32_t)(1 << 0)
#define NODE_EVENT_NEW_THERMOSTAT_VALUE     (uint32_t)(1 << 0)
#define NODE_EVENT_UPDATE_LCD               (uint32_t)(1 << 1)

/* A change mask of 0xFF0 means that changes in the lower 4 bits does not trigger a wakeup. */
#define NODE_ADCTASK_CHANGE_MASK                    0xFFF

/* Minimum slow Report interval is 50s (in units of samplingTime)*/
#define NODE_ADCTASK_REPORTINTERVAL_SLOW                50
/* Minimum fast Report interval is 1s (in units of samplingTime) for 30s*/
#define NODE_ADCTASK_REPORTINTERVAL_FAST                5
#define NODE_ADCTASK_REPORTINTERVAL_FAST_DURIATION_MS   30000


#define NUM_EDDYSTONE_URLS      5

//-------------------------------------------------------
//  Type Declarations

struct Room {
    uint8_t     RoomActive;
    uint8_t     SensorActive;
    uint8_t     VentActive;
    uint16_t    DesiredTemp;
    uint16_t    CurrentTemp;
    uint16_t    OpenVent;
    uint16_t    MotionDetected;
};
struct Room Room[9];

//-------------------------------------------------------
//  Variable Declarations
static Task_Params nodeTaskParams;
Task_Struct nodeTask;    /* not static so you can see in ROV */
static uint8_t nodeTaskStack[NODE_TASK_STACK_SIZE];
Event_Struct nodeEvent;  /* not static so you can see in ROV */
static Event_Handle nodeEventHandle;
static uint16_t latestAdcValue;

/* Clock for the fast report timeout */
Clock_Struct fastReportTimeoutClock;     /* not static so you can see in ROV */
static Clock_Handle fastReportTimeoutClockHandle;

/* Pin driver handle */
static PIN_Handle buttonPinHandle;
static PIN_Handle ledPinHandle;
static PIN_State buttonPinState;
static PIN_State ledPinState;

/* Display driver handles */
static Display_Handle hDisplayLcd;
static Display_Handle hDisplaySerial;

#ifdef FEATURE_BLE_ADV
static BleAdv_AdertiserType advertisementType = BleAdv_AdertiserMs;
static const char* urls[NUM_EDDYSTONE_URLS] = {"http://www.ti.com/","http://tinyurl.com/z7ofjy7","http://tinyurl.com/jt6j7ya","http://tinyurl.com/h53v6fe","http://www.ti.com/TI154Stack"};
static uint8_t eddystoneUrlIdx = 0;
#endif

/* Enable the 3.3V power domain used by the LCD */
PIN_Config pinTable[] = {
    NODE_ACTIVITY_LED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
	PIN_TERMINATE
};

/*
 * Application button pin configuration table:
 *   - Buttons interrupts are configured to trigger on falling edge.
 */
PIN_Config buttonPinTable[] = {
    Board_PIN_BUTTON0  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
#ifdef FEATURE_BLE_ADV
    Board_PIN_BUTTON1  | PIN_INPUT_EN | PIN_PULLUP | PIN_IRQ_NEGEDGE,
#endif
    PIN_TERMINATE
};

static uint8_t nodeAddress = 0;

#ifdef FEATURE_BLE_ADV
static BleAdv_Stats bleAdvStats = {0};
#endif

uint8_t n = 0x01;

uint8_t RoomActiveAddress = 0x00;
uint8_t RoomFilter = 0xF0;
uint8_t DeviceFilter = 0x0F;

uint8_t SpecificRoomFilter = 0x00;
uint8_t SensorFilter = (0x08);
uint8_t VentFilter = (0x07);

//-------------------------------------------------------
//  Prototypes
static void nodeTaskFunction(UArg arg0, UArg arg1);
static void updateLcd(void);
static void fastReportTimeoutCallback(UArg arg0);
static void adcCallback(uint16_t adcValue);
static void buttonCallback(PIN_Handle handle, PIN_Id pinId);


//-------------------------------------------------------
//  Function Definitions
void NodeTask_init(void)
{
    Room[1].CurrentTemp = 190;
    Room[2].CurrentTemp = 190;
    Room[3].CurrentTemp = 210;
    Room[4].CurrentTemp = 210;
    Room[5].CurrentTemp = 210;
    Room[6].CurrentTemp = 210;
    Room[7].CurrentTemp = 210;
    Room[8].CurrentTemp = 210;

    Room[1].DesiredTemp = 180;
    Room[2].DesiredTemp = 180;
    Room[3].DesiredTemp = 180;
    Room[4].DesiredTemp = 180;
    Room[5].DesiredTemp = 180;
    Room[6].DesiredTemp = 180;
    Room[7].DesiredTemp = 180;
    Room[8].DesiredTemp = 180;
    /* Create event used internally for state changes */
    Event_Params eventParam;
    Event_Params_init(&eventParam);
    Event_construct(&nodeEvent, &eventParam);
    nodeEventHandle = Event_handle(&nodeEvent);

    /* Create clock object which is used for fast report timeout */
    Clock_Params clkParams;
    Clock_Params_init(&clkParams);

    clkParams.period = 0;
    clkParams.startFlag = FALSE;
    Clock_construct(&fastReportTimeoutClock, fastReportTimeoutCallback, 1, &clkParams);
    fastReportTimeoutClockHandle = Clock_handle(&fastReportTimeoutClock);

    /* Create the node task */
    Task_Params_init(&nodeTaskParams);
    nodeTaskParams.stackSize = NODE_TASK_STACK_SIZE;
    nodeTaskParams.priority = NODE_TASK_PRIORITY;
    nodeTaskParams.stack = &nodeTaskStack;
    Task_construct(&nodeTask, nodeTaskFunction, &nodeTaskParams, NULL);
}

#ifdef FEATURE_BLE_ADV
void NodeTask_advStatsCB(BleAdv_Stats stats)
{
    memcpy(&bleAdvStats, &stats, sizeof(BleAdv_Stats));

    /* Post LCD update event */
    Event_post(nodeEventHandle, NODE_EVENT_UPDATE_LCD);
}
#endif

static void nodeTaskFunction(UArg arg0, UArg arg1)
{
    /* Initialize display and try to open both UART and LCD types of display. */
    Display_Params params;
    Display_Params_init(&params);
    params.lineClearMode = DISPLAY_CLEAR_BOTH;

    /* Open both an available LCD display and an UART display.
     * Whether the open call is successful depends on what is present in the
     * Display_config[] array of the board file.
     *
     * Note that for SensorTag evaluation boards combined with the SHARP96x96
     * Watch DevPack, there is a pin conflict with UART such that one must be
     * excluded, and UART is preferred by default. To display on the Watch
     * DevPack, add the precompiler define BOARD_DISPLAY_EXCLUDE_UART.
     */
    hDisplayLcd = Display_open(Display_Type_LCD, &params);
    hDisplaySerial = Display_open(Display_Type_UART, &params);

    /* Check if the selected Display type was found and successfully opened */
    if (hDisplaySerial)
    {
        Display_printf(hDisplaySerial, 0, 0, "Waiting for S1CE ADC reading...");
    }

    /* Check if the selected Display type was found and successfully opened */
    if (hDisplayLcd)
    {
        Display_printf(hDisplayLcd, 0, 0, "Waiting for ADC...");
    }

    /* Open LED pins */
    ledPinHandle = PIN_open(&ledPinState, pinTable);
    if (!ledPinHandle)
    {
        System_abort("Error initializing board 3.3V domain pins\n");
    }





//    unsigned int    i;
//    uint16_t        temperature;
//    uint8_t         txBuffer[1];
//    uint8_t         rxBuffer[2];
//    I2C_Handle      i2c;
//    I2C_Params      i2cParams;
//    I2C_Transaction i2cTransaction;
//
//    /* Create I2C for usage */
//    I2C_Params_init(&i2cParams);
//    i2cParams.bitRate = I2C_400kHz;
//    i2c = I2C_open(Board_I2C_TMP, &i2cParams);
//    if (i2c == NULL) {
//        System_abort("Error Initializing I2C\n");
//    }
//    else {
//        System_printf("I2C Initialized!\n");
//    }
//
//    /* Point to the T ambient register and read its 2 bytes */
//    txBuffer[0] = 0x01;
//    i2cTransaction.slaveAddress = 0x41;
//    i2cTransaction.writeBuf = txBuffer;
//    i2cTransaction.writeCount = 1;
//    i2cTransaction.readBuf = rxBuffer;
//    i2cTransaction.readCount = 2;

    /* Take 20 samples and print them out onto the console */
//    for (i = 0; i < 20; i++) {
//        if (I2C_transfer(i2c, &i2cTransaction)) {
//            /* Extract degrees C from the received data; see TMP102 datasheet */
//            temperature = (rxBuffer[0] << 6) | (rxBuffer[1] >> 2);
//
//            /*
//             * If the MSB is set '1', then we have a 2's complement
//             * negative value which needs to be sign extended
//             */
//            if (rxBuffer[0] & 0x80) {
//                temperature |= 0xF000;
//            }
//           /*
//            * For simplicity, divide the temperature value by 32 to get rid of
//            * the decimal precision; see TI's TMP006 datasheet
//            */
//            temperature /= 32;
//
//            System_printf("Sample %u: %d (C)\n", i, temperature);
//        }
//        else {
//            System_printf("I2C Bus fault\n");
//        }
//
//        System_flush();
////        Task_sleep(1000);
//    }

//    /* Deinitialized I2C */
//    I2C_close(i2c);
////    System_printf("I2C closed!\n");
//
//    System_flush();

    //Random Number Generator
//    Power_setDependency(PowerCC26XX_PERIPH_TRNG);
//    TRNGEnable();
//    /* Do not accept the same address as the concentrator, in that case get a new random value */
//    do
//    {
//        while (!(TRNGStatusGet() & TRNG_NUMBER_READY))
//        {
//            //wait for random number generator
//        }
//        Room[2].CurrentTemp = (uint16_t)TRNGNumberGet(TRNG_LOW_WORD);
//    } while (Room[2].CurrentTemp > 40 | Room[2].CurrentTemp < 10);
//    TRNGDisable();
//    Power_releaseDependency(PowerCC26XX_PERIPH_TRNG);

//    if (Room[2].CurrentTemp < Room[2].DesiredTemp){
//        Event_post(nodeEventHandle, NODE_EVENT_NEW_THERMOSTAT_VALUE);
//    }

        /* Start the SCE ADC task with 1s sample period and reacting to change in ADC value. */
    SceAdc_init(0x00010000, NODE_ADCTASK_REPORTINTERVAL_FAST, NODE_ADCTASK_CHANGE_MASK);
    SceAdc_registerAdcCallback(adcCallback);
    SceAdc_start();

    /* setup timeout for fast report timeout */
    Clock_setTimeout(fastReportTimeoutClockHandle,
            NODE_ADCTASK_REPORTINTERVAL_FAST_DURIATION_MS * 1000 / Clock_tickPeriod);

    /* start fast report and timeout */
    Clock_start(fastReportTimeoutClockHandle);


    buttonPinHandle = PIN_open(&buttonPinState, buttonPinTable);
    if (!buttonPinHandle)
    {
        System_abort("Error initializing button pins\n");
    }

    /* Setup callback for button pins */
    if (PIN_registerIntCb(buttonPinHandle, &buttonCallback) != 0)
    {
        System_abort("Error registering button callback function");
    }

    while (1)
    {
        /* Wait for event */
        uint32_t events = Event_pend(nodeEventHandle, 0, NODE_EVENT_ALL, BIOS_WAIT_FOREVER);

        /* If new ADC value, send this data */
        if (events & NODE_EVENT_NEW_THERMOSTAT_VALUE) {
            /* Toggle activity LED */
            PIN_setOutputValue(ledPinHandle, NODE_ACTIVITY_LED,!PIN_getOutputValue(NODE_ACTIVITY_LED));

            if(latestAdcValue == 2) {
                Room[2].DesiredTemp += 5;
            }
            if(latestAdcValue == 1) {
                Room[2].DesiredTemp -= 5;
            }
            /* Send ADC value to concentrator */
            NodeRadioTask_sendThermostatData(Room[1].CurrentTemp, Room[1].DesiredTemp,
                                             Room[2].CurrentTemp, Room[2].DesiredTemp,
                                             Room[3].CurrentTemp, Room[3].DesiredTemp,
                                             Room[4].CurrentTemp, Room[4].DesiredTemp,
                                             Room[5].CurrentTemp, Room[5].DesiredTemp,
                                             Room[6].CurrentTemp, Room[6].DesiredTemp,
                                             Room[7].CurrentTemp, Room[7].DesiredTemp,
                                             Room[8].CurrentTemp, Room[8].DesiredTemp);

            /* Update display */
            updateLcd();
        }
        /* If new ADC value, send this data */
        if (events & NODE_EVENT_UPDATE_LCD) {
            /* update display */
            updateLcd();
        }
    }
}

static void updateLcd(void)
{
#ifdef FEATURE_BLE_ADV
    char advMode[16] = {0};
#endif

    /* get node address if not already done */
    if (nodeAddress == 0)
    {
        nodeAddress = nodeRadioTask_getNodeAddr();
    }

    /* print to LCD */
    Display_clear(hDisplayLcd);
    Display_printf(hDisplayLcd, 0, 0, "NodeID: 0x%02x", nodeAddress);
    Display_printf(hDisplayLcd, 1, 0, "ADC: %04d", latestAdcValue);

    /* print to UART clear screen, put cuser to beggining of terminal and print the header */
    Display_printf(hDisplaySerial, 0, 0, "\033[2J \033[0;0HNode ID: 0x%02x", nodeAddress);
    Display_printf(hDisplaySerial, 0, 0, "Node ADC Reading: %04d", latestAdcValue);
    Display_printf(hDisplaySerial, 0, 0, "Room 2    DesiredTemp CurrentTemp");
    Display_printf(hDisplaySerial, 0, 0, "          %04d        %04d", Room[2].DesiredTemp, Room[2].CurrentTemp);

#ifdef FEATURE_BLE_ADV
    if (advertisementType == BleAdv_AdertiserMs)
    {
         strncpy(advMode, "BLE MS", 6);
    }
    else if (advertisementType == BleAdv_AdertiserUrl)
    {
         strncpy(advMode, "Eddystone URL", 13);
    }
    else if (advertisementType == BleAdv_AdertiserUid)
    {
         strncpy(advMode, "Eddystone UID", 13);
    }
    else
    {
         strncpy(advMode, "None", 4);
    }

    /* print to LCD */
    Display_printf(hDisplayLcd, 2, 0, "Adv Mode:");
    Display_printf(hDisplayLcd, 3, 0, "%s", advMode);
    Display_printf(hDisplayLcd, 4, 0, "Adv successful | failed");
    Display_printf(hDisplayLcd, 5, 0, "%04d | %04d",
                   bleAdvStats.successCnt + bleAdvStats.failCnt);

    /* print to UART */
    Display_printf(hDisplaySerial, 0, 0, "Advertiser Mode: %s", advMode);
    Display_printf(hDisplaySerial, 0, 0, "Advertisement success: %d out of %d",
                   bleAdvStats.successCnt,
                   bleAdvStats.successCnt + bleAdvStats.failCnt);
#endif
}

static void adcCallback(uint16_t adcValue)
{
    /* Save latest value */
    latestAdcValue = adcValue;

    /* Post event */
    Event_post(nodeEventHandle, NODE_EVENT_NEW_THERMOSTAT_VALUE);
}

/*
 *  ======== buttonCallback ========
 *  Pin interrupt Callback function board buttons configured in the pinTable.
 */
static void buttonCallback(PIN_Handle handle, PIN_Id pinId)
{
    /* Debounce logic, only toggle if the button is still pushed (low) */
    CPUdelay(8000*50);


    if (PIN_getInputValue(Board_PIN_BUTTON0) == 0)
    {
        //start fast report and timeout
        SceAdc_setReportInterval(NODE_ADCTASK_REPORTINTERVAL_FAST, NODE_ADCTASK_CHANGE_MASK);
        Clock_start(fastReportTimeoutClockHandle);
    }
#ifdef FEATURE_BLE_ADV
    else if (PIN_getInputValue(Board_PIN_BUTTON1) == 0)
    {
        if (advertisementType != BleAdv_AdertiserUrl)
        {
            advertisementType++;
        }

        //If URL then cycle between url[0 - num urls]
        if (advertisementType == BleAdv_AdertiserUrl)
        {
            if (eddystoneUrlIdx < NUM_EDDYSTONE_URLS)
            {
                //update URL
                BleAdv_updateUrl(urls[eddystoneUrlIdx++]);
            }
            else
            {
                //last URL, reset index and increase advertiserType
                advertisementType++;
                eddystoneUrlIdx = 0;
            }
        }

        if (advertisementType == BleAdv_AdertiserTypeEnd)
        {
            advertisementType = BleAdv_AdertiserNone;
        }

        //Set advertisement type
        BleAdv_setAdvertiserType(advertisementType);

        /* update display */
        Event_post(nodeEventHandle, NODE_EVENT_UPDATE_LCD);

        //start fast report and timeout
        SceAdc_setReportInterval(NODE_ADCTASK_REPORTINTERVAL_FAST, NODE_ADCTASK_CHANGE_MASK);
        Clock_start(fastReportTimeoutClockHandle);
    }
#endif
}

static void fastReportTimeoutCallback(UArg arg0)
{
    //stop fast report
    SceAdc_setReportInterval(NODE_ADCTASK_REPORTINTERVAL_SLOW, NODE_ADCTASK_CHANGE_MASK);
}

#ifdef FEATURE_BLE_ADV
void rfSwitchCallback(RF_Handle h, RF_ClientEvent event, void* arg){
#if defined(Board_DIO30_SWPWR)
    //Turn on switch
    PIN_setOutputValue(blePinHandle, Board_DIO30_SWPWR, 1);
#endif
    PIN_setOutputValue(blePinHandle, RF_SWITCH_PIN, 1);
}
#endif
