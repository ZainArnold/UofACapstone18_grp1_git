/*
 * Copyright (c) 2015-2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/***** Includes *****/
/* XDCtools Header files */ 
#include <xdc/std.h>
#include <xdc/runtime/System.h>

#include "ConcentratorRadioTask.h"

/* BIOS Header files */ 
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Event.h>

/* Drivers */
#include <ti/drivers/rf/RF.h>
#include <ti/drivers/PIN.h>

/* Board Header files */
#include "Board.h"

/* EasyLink API Header files */ 
#include "easylink/EasyLink.h"

/* Application Header files */ 
#include "RadioProtocol.h"


/***** Defines *****/
#define CONCENTRATORRADIO_TASK_STACK_SIZE 2048
#define CONCENTRATORRADIO_TASK_PRIORITY_RX   3
#define CONCENTRATORRADIO_TASK_PRIORITY_TX   4

#define RADIO_EVENT_ALL                     0xFFFFFFFF
#define RADIO_EVENT_VALID_PACKET_RECEIVED   (uint32_t)(1 << 0)
#define RADIO_EVENT_INVALID_PACKET_RECEIVED (uint32_t)(1 << 1)
#define RADIO_EVENT_SEND_VENT_DATA          (uint32_t)(1 << 2)

#define CONCENTRATORRADIO_MAX_RETRIES 2
#define NORERADIO_ACK_TIMEOUT_TIME_MS (160)


#define CONCENTRATOR_ACTIVITY_LED_RX Board_PIN_LED0
#define CONCENTRATOR_ACTIVITY_LED_TX Board_PIN_LED1


//---------------------------------------
//  Type Declaration

//RX Type

//TX Type
struct RadioOperation {
    EasyLink_TxPacket easyLinkTxPacket;
    uint8_t retriesDone;
    uint8_t maxNumberOfRetries;
    uint32_t ackTimeoutMs;
    enum ConcentratorRadioOperationStatus_TX result;
};


//---------------------------------------
//  Variable Declaration



//  RX Variables
static Task_Params concentratorRadioTaskParams_RX;
Task_Struct concentratorRadioTask_RX; /* not static so you can see in ROV */
static uint8_t concentratorRadioTaskStack_RX[CONCENTRATORRADIO_TASK_STACK_SIZE];
Event_Struct radioOperationEvent_RX;  /* not static so you can see in ROV */
static Event_Handle radioOperationEventHandle_RX;
static ConcentratorRadio_PacketReceivedCallback packetReceivedCallback;
static union ConcentratorPacket latestRxPacket;
static EasyLink_TxPacket txPacket;
static struct AckPacket ackPacket;
static uint8_t concentratorAddress;
static int8_t latestRssi;

//  TX Variables
static Task_Params concentratorRadioTaskParams_TX;
Task_Struct concentratorRadioTask_TX;        /* not static so you can see in ROV */
static uint8_t concentratorRadioTaskStack_TX[CONCENTRATORRADIO_TASK_STACK_SIZE];
Semaphore_Struct radioAccessSem_TX;  /* not static so you can see in ROV */
static Semaphore_Handle radioAccessSemHandle_TX;
Event_Struct radioOperationEvent_TX; /* not static so you can see in ROV */
static Event_Handle radioOperationEventHandle_TX;
Semaphore_Struct radioResultSem_TX;  /* not static so you can see in ROV */
static Semaphore_Handle radioResultSemHandle_TX;
static struct RadioOperation currentRadioOperation;
static uint16_t ventData;
static uint8_t nodeAddress = 0;
//static struct DualModeVentPacket dmSensorPacket;


//---------------------------------------
//  Prototypes

// RX Prototypes
static void concentratorRadioTaskFunction_RX(UArg arg0, UArg arg1);
static void rxDoneCallback(EasyLink_RxPacket * rxPacket, EasyLink_Status status);
static void notifyPacketReceived(union ConcentratorPacket* latestRxPacket);
static void sendAck(uint8_t latestSourceAddress);


//TX Prototypes
static void concentratorRadioTaskFunction_TX(UArg arg0, UArg arg1);
//static void returnRadioOperationStatus_TX(enum NodeRadioOperationStatus status);
//static void sendDmPacket(struct DualModeSensorPacket sensorPacket, uint8_t maxNumberOfRetries, uint32_t ackTimeoutMs);
//static void resendPacket(void);
//static void rxDoneCallback(EasyLink_RxPacket * rxPacket, EasyLink_Status status);


/* Pin driver handle */
static PIN_Handle ledPinHandle;
static PIN_State ledPinState;

/* Configure LED Pin */
PIN_Config ledPinTable[] = {
        CONCENTRATOR_ACTIVITY_LED_RX | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};


//-----------------------------------------------
// Concentrator Receive Task Functions
void ConcentratorRadioTask_init_RX(void) {

    /* Open LED pins */
    ledPinHandle = PIN_open(&ledPinState, ledPinTable);
    if (!ledPinHandle)
    {
        System_abort("Error initializing board 3.3V domain pins\n");
    }

    /* Create event used internally for state changes */
    Event_Params eventParam_RX;
    Event_Params_init(&eventParam_RX);
    Event_construct(&radioOperationEvent_RX, &eventParam_RX);
    radioOperationEventHandle_RX = Event_handle(&radioOperationEvent_RX);

    /* Create the concentrator radio protocol task */
    Task_Params_init(&concentratorRadioTaskParams_RX);
    concentratorRadioTaskParams_RX.stackSize = CONCENTRATORRADIO_TASK_STACK_SIZE;
    concentratorRadioTaskParams_RX.priority = CONCENTRATORRADIO_TASK_PRIORITY_RX;
    concentratorRadioTaskParams_RX.stack = &concentratorRadioTaskStack_RX;
    Task_construct(&concentratorRadioTask_RX, concentratorRadioTaskFunction_RX, &concentratorRadioTaskParams_RX, NULL);
}

void ConcentratorRadioTask_registerPacketReceivedCallback(ConcentratorRadio_PacketReceivedCallback callback) {
    packetReceivedCallback = callback;
}

static void concentratorRadioTaskFunction_RX(UArg arg0, UArg arg1)
{
    /* Initialize EasyLink */
    if(EasyLink_init(RADIO_EASYLINK_MODULATION) != EasyLink_Status_Success) {
        System_abort("EasyLink_init failed");
    }


    /* If you wish to use a frequency other than the default use
     * the below API
     * EasyLink_setFrequency(868000000);
     */

    /* Set concentrator address */;
    concentratorAddress = RADIO_CONCENTRATOR_ADDRESS;
    EasyLink_enableRxAddrFilter(&concentratorAddress, 1, 1);

    /* Set up Ack packet */
    ackPacket.header.sourceAddress = concentratorAddress;
    ackPacket.header.packetType = RADIO_PACKET_TYPE_ACK_PACKET;

    /* Enter receive */
    if(EasyLink_receiveAsync(rxDoneCallback, 0) != EasyLink_Status_Success) {
        System_abort("EasyLink_receiveAsync failed");
    }

    while (1) {
        uint32_t events = Event_pend(radioOperationEventHandle_RX, 0, RADIO_EVENT_ALL, BIOS_WAIT_FOREVER);

        /* If valid packet received */
        if(events & RADIO_EVENT_VALID_PACKET_RECEIVED) {

            /* Send ack packet */
            sendAck(latestRxPacket.header.sourceAddress);

            /* Call packet received callback */
            notifyPacketReceived(&latestRxPacket);
            /* Go back to RX */
            if(EasyLink_receiveAsync(rxDoneCallback, 0) != EasyLink_Status_Success) {
                System_abort("EasyLink_receiveAsync failed");
            }

            /* toggle Activity LED */
            PIN_setOutputValue(ledPinHandle, CONCENTRATOR_ACTIVITY_LED_RX,
                    !PIN_getOutputValue(CONCENTRATOR_ACTIVITY_LED_RX));
        }

        /* If invalid packet received */
        if(events & RADIO_EVENT_INVALID_PACKET_RECEIVED) {
            /* Go back to RX */
            if(EasyLink_receiveAsync(rxDoneCallback, 0) != EasyLink_Status_Success) {
                System_abort("EasyLink_receiveAsync failed");
            }
        }
    }
}

static void sendAck(uint8_t latestSourceAddress) {

    /* Set destinationAdress, but use EasyLink layers destination address capability */
    txPacket.dstAddr[0] = latestSourceAddress;


    /* Copy ACK packet to payload, skipping the destination adress byte.
     * Note that the EasyLink API will implcitily both add the length byte and the destination address byte. */
    memcpy(txPacket.payload, &ackPacket.header, sizeof(ackPacket));
    txPacket.len = sizeof(ackPacket);

    /* Send packet  */
    if (EasyLink_transmit(&txPacket) != EasyLink_Status_Success)
    {
        System_abort("EasyLink_transmit failed");
    }

}

static void notifyPacketReceived(union ConcentratorPacket* latestRxPacket)
{
    if (packetReceivedCallback)
    {
        packetReceivedCallback(latestRxPacket, latestRssi);
    }
}

static void rxDoneCallback(EasyLink_RxPacket * rxPacket, EasyLink_Status status)
{
    union ConcentratorPacket* tmpRxPacket;

    /* If we received a packet successfully */
    if (status == EasyLink_Status_Success)
    {
        /* Save the latest RSSI, which is later sent to the receive callback */
        latestRssi = (int8_t)rxPacket->rssi;

        /* Check that this is a valid packet */
        tmpRxPacket = (union ConcentratorPacket*)(rxPacket->payload);

        /* If this is a known packet */
        if (tmpRxPacket->header.packetType == RADIO_PACKET_TYPE_ADC_SENSOR_PACKET)
        {
            /* Save packet */
            latestRxPacket.header.sourceAddress             = rxPacket->payload[0];
            latestRxPacket.header.packetType                = rxPacket->payload[1];
            latestRxPacket.adcSensorPacket.adcValue         = (rxPacket->payload[2] << 8) | rxPacket->payload[3];

            /* Signal packet received */
            Event_post(radioOperationEventHandle_RX, RADIO_EVENT_VALID_PACKET_RECEIVED);
        }
        else if (tmpRxPacket->header.packetType == RADIO_PACKET_TYPE_DM_SENSOR_PACKET)
        {


            //latestRxPacket.header.sourceAddress - NodeID
            latestRxPacket.header.sourceAddress             = rxPacket->payload[0];
            latestRxPacket.header.packetType                = rxPacket->payload[1];
            latestRxPacket.dmSensorPacket.adcValue          = (rxPacket->payload[2] << 8) | rxPacket->payload[3];
            latestRxPacket.dmSensorPacket.batt              = (rxPacket->payload[4] << 8) | rxPacket->payload[5];
            latestRxPacket.dmSensorPacket.time100MiliSec    = (rxPacket->payload[6] << 24) |
                                                              (rxPacket->payload[7] << 16) |
                                                              (rxPacket->payload[8] << 8)  | rxPacket->payload[9];
            latestRxPacket.dmSensorPacket.button            = rxPacket->payload[10];

            /* Signal packet received */
            Event_post(radioOperationEventHandle_RX, RADIO_EVENT_VALID_PACKET_RECEIVED);
        }
        else
        {
            /* Signal invalid packet received */
            Event_post(radioOperationEventHandle_RX, RADIO_EVENT_INVALID_PACKET_RECEIVED);
        }
    }
    else
    {
        /* Signal invalid packet received */
        Event_post(radioOperationEventHandle_RX, RADIO_EVENT_INVALID_PACKET_RECEIVED);
    }
}


//-----------------------------------------------
// Concentrator Send Task
void ConcentratorRadioTask_init_TX(void) {

    /* Create semaphore used for exclusive radio access */
    Semaphore_Params semParam_TX;
    Semaphore_Params_init(&semParam_TX);
    Semaphore_construct(&radioAccessSem_TX, 1, &semParam_TX);
    radioAccessSemHandle_TX = Semaphore_handle(&radioAccessSem_TX);

    /* Create semaphore used for callers to wait for result */
    Semaphore_construct(&radioResultSem_TX, 0, &semParam_TX);
    radioAccessSemHandle_TX = Semaphore_handle(&radioResultSem_TX);

    /* Create event used internally for state changes */
    Event_Params eventParam_TX;
    Event_Params_init(&eventParam_TX);
    Event_construct(&radioOperationEvent_TX, &eventParam_TX);
    radioOperationEventHandle_TX = Event_handle(&radioOperationEvent_TX);

    /* Create the radio protocol task */
    Task_Params_init(&concentratorRadioTaskParams_TX);
    concentratorRadioTaskParams_TX.stackSize = CONCENTRATORRADIO_TASK_STACK_SIZE;
    concentratorRadioTaskParams_TX.priority = CONCENTRATORRADIO_TASK_PRIORITY_TX;
    concentratorRadioTaskParams_TX.stack = &concentratorRadioTaskStack_TX;
    Task_construct(&concentratorRadioTask_TX, concentratorRadioTaskFunction_TX, &concentratorRadioTaskParams_TX, NULL);
}


